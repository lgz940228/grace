package com.uc.common.poi.util;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTR;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTText;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author yanxin.li@ucarinc.com
 */
public class WordTemplateUtil {
    /**
     * 从模版中生成XWPFDocument
     *
     * @param templateFilePath
     * @param data
     * @return
     * @throws IOException
     */
    public static XWPFDocument generateWordFromTemplate(String templateFilePath, WordTemplateData data) throws IOException {
        if (data == null) {
            throw new RuntimeException("WordTemplateData can not be null");
        }

        if (data.getPlainTextData().isEmpty() && data.getTableData().isEmpty()) {
            throw new RuntimeException("the plain text data and table data can not be empty");
        }

        try {
            InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream(templateFilePath);
            if (input == null) {
                throw new RuntimeException("error");
            }
            XWPFDocument document = new XWPFDocument(input);
            /* 在段落中查找并替换 */
            document = replaceTextInPlaintext(document, data.getPlainTextData());
            /* 在表格中查找并替换 */
            document = replaceTextInTable(document, data.getTableData());
            return document;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * 替换普通文本中的变量字符串
     *
     * @param doc
     * @param plainTextData
     * @return
     */
    @SuppressWarnings("deprecation")
    private static XWPFDocument replaceTextInPlaintext(XWPFDocument doc, Map<String, String> plainTextData) {
        /* 遍历文档中所有普通文本段落 */
        List<XWPFParagraph> paras = doc.getParagraphs();
        for (XWPFParagraph para : paras) {
            CTR[] ctrs = para.getCTP().getRArray();
            for (CTR ctr : ctrs) {
                CTText[] texts = ctr.getTArray();
                for (CTText text : texts) {
                    String textData = text.getStringValue() == null ? "" : text.getStringValue();
                    textData = replaceText(plainTextData, textData);
                    text.setStringValue(textData);
                }
            }
        }
        return doc;
    }


    /**
     * 替换表格中的变量字符串
     *
     * @param doc
     * @param tableData
     * @return
     */
    private static XWPFDocument replaceTextInTable(XWPFDocument doc, Map<String, String> tableData) {
        List<XWPFTable> xwpfTables = doc.getTables();
        // 开始迭代表格
        for (int i = 0; i < xwpfTables.size(); i++) {
            // 迭代第一个表格
            XWPFTable xwpfTable = xwpfTables.get(i);
            // 得到表格的行数
            List<XWPFTableRow> rows = xwpfTable.getRows();
            for (int j = 0; j < rows.size(); j++) {
                // 迭代表格的行数
                XWPFTableRow tableRow = rows.get(j);
                List<XWPFTableCell> rowCells = tableRow.getTableCells();
                for (int k = 0; k < rowCells.size(); k++) {
                    XWPFTableCell tableCell = rowCells.get(k);
                    /* 遍历表格中所有段落，找到可替换字符串并替换 */
                    List<XWPFParagraph> paras = tableCell.getParagraphs();
                    for (XWPFParagraph para : paras) {
                        if (para.getRuns().size() == 0) {
                            continue;
                        }
                        List<XWPFRun> runs = para.getRuns();
                        StringBuilder runText = new StringBuilder();
                        for (XWPFRun run : runs) {
                            runText.append(StringUtils.trim(run.getText(0)));
                            run.setText(StringUtils.EMPTY, 0);
                        }

                        String runTextData = replaceText(tableData, runText.toString());
                        para.getRuns().get(0).setText(runTextData, 0);
                    }
                }
            }
        }
        return doc;
    }


    /**
     * 根据Map中的所有key寻找匹配字符串，如果找到则用对应的value替换
     *
     * @param data
     * @param placeHolder
     * @return 返回替换后的文本
     */
    private static String replaceText(Map<String, String> data, String placeHolder) {
        if (StringUtils.equals(placeHolder, "null")) {
            return StringUtils.EMPTY;
        }
        Matcher m = Pattern.compile("\\{([A-Za-z0-9]+)\\}").matcher(placeHolder);
        while (m.find()) {
            String key = StringUtils.substringBetween(m.group(), "{", "}");
            if (data.get(key) == null) {
                placeHolder = StringUtils.replace(placeHolder, m.group(), "____");
            }
            placeHolder = StringUtils.replace(placeHolder, m.group(), data.get(key));
        }
        return placeHolder;
    }

//    public static void main(String args[]) {
//        String text = "你好{placeHolder} 我们";
//        Matcher m = Pattern.compile("\\{([A-Za-z]+)\\}").matcher(text);
//        int count = 0;
//        while (m.find()) {
//            String key = StringUtils.substringBetween(m.group(), "{", "}");
//            System.out.println(key);
//            text = text.replace(m.group(), String.valueOf(count));
//        }
//        System.out.println(text);
//    }

}



package com.uc.common.poi.util;

import org.apache.commons.lang3.StringUtils;

import java.util.HashMap;
import java.util.Map;

/**
 * @author yanxin.li@ucarinc.com
 */
public class WordTemplateData {

    private Map<String, String> plainTextData;
    private Map<String, String> tableData;

    public WordTemplateData() {
        plainTextData = new HashMap<String, String>();
        tableData = new HashMap<String, String>();
    }

    public void addPlainTextData(String key, String value) {
        if (StringUtils.isNotBlank(key)) {
            this.plainTextData.put(key, value);
        }
    }

    public void addTableData(String key, String value) {
        if (StringUtils.isNotBlank(key)) {
            this.tableData.put(key, value);
        }
    }

    public Map<String, String> getPlainTextData() {
        return plainTextData;
    }

    public void setPlainTextData(Map<String, String> plainTextData) {
        this.plainTextData = plainTextData;
    }

    public Map<String, String> getTableData() {
        return tableData;
    }

    public void setTableData(Map<String, String> tableData) {
        this.tableData = tableData;
    }
}


package com.uc.common.utils.net;

import com.google.common.net.InetAddresses;
import com.uc.common.utils.number.NumberUtil;
import com.uc.common.utils.text.MoreStringUtil;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;

/**
 * InetAddress工具类，基于Guava的InetAddresses.
 * <p>
 * 主要包含int, String/IPV4String, InetAdress/Inet4Address之间的互相转换
 * <p>
 * 先将字符串传换为byte[]再用InetAddress.getByAddress(byte[])，避免了InetAddress.getByName(ip)可能引起的DNS访问.
 * <p>
 * InetAddress与String的转换其实消耗不小，如果是有限的地址，建议进行缓存.
 *
 * @author calvin
 */
public class IPUtil {

    /**
     * 从InetAddress转化到int, 传输和存储时, 用int代表InetAddress是最小的开销.
     * <p>
     * InetAddress可以是IPV4或IPV6，都会转成IPV4.
     *
     * @see InetAddresses#coerceToInteger(InetAddress)
     */
    public static int toInt(InetAddress address) {
        return InetAddresses.coerceToInteger(address);
    }

    /**
     * InetAddress转换为String.
     * <p>
     * InetAddress可以是IPV4或IPV6. 其中IPV4直接调用getHostAddress()
     *
     * @see InetAddresses#toAddrString(InetAddress)
     */
    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }

    /**
     * 从int转换为Inet4Address(仅支持IPV4)
     */
    public static Inet4Address fromInt(int address) {
        return InetAddresses.fromInteger(address);
    }

    /**
     * 从String转换为InetAddress.
     * <p>
     * IpString可以是ipv4 或 ipv6 string, 但不可以是域名.
     * <p>
     * 先字符串传换为byte[]再调getByAddress(byte[])，避免了调用getByName(ip)可能引起的DNS访问.
     */
    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }

    /**
     * 从IPv4String转换为InetAddress.
     * <p>
     * IpString如果确定ipv4, 使用本方法减少字符分析消耗 .
     * <p>
     * 先字符串传换为byte[]再调getByAddress(byte[])，避免了调用getByName(ip)可能引起的DNS访问.
     */
    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }

    /**
     * int转换到IPV4 String, from Netty NetUtil
     */
    public static String intToIpv4String(int i) {
        return new StringBuilder(15).append(i >> 24 & 0xff).append('.').append(i >> 16 & 0xff).append('.')
                .append(i >> 8 & 0xff).append('.').append(i & 0xff).toString();
    }

    /**
     * Ipv4 String 转换到int
     */
    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }

    /**
     * Ipv4 String 转换到byte[]
     */
    private static byte[] ip4StringToBytes(String ipv4Str) {
        if (ipv4Str == null) {
            return null;
        }

        List<String> it = MoreStringUtil.split(ipv4Str, '.', 4);
        if (it.size() != 4) {
            return null;
        }

        byte[] byteAddress = new byte[4];
        for (int i = 0; i < 4; i++) {
            int tempInt = Integer.parseInt(it.get(i));
            if (tempInt > 255) {
                return null;
            }
            byteAddress[i] = (byte) tempInt;
        }
        return byteAddress;
    }
}



package com.uc.common.utils.net;

import com.google.common.annotations.Beta;
import com.uc.common.utils.base.SystemPropertiesUtil;
import com.uc.common.utils.collection.MapUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.net.ServerSocketFactory;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.Map;
import java.util.Random;

/**
 * 关于网络的工具类.
 * <p>
 * 1. 获取Local Address
 * <p>
 * 2. 查找空闲端口
 *
 * @author calvin
 */
@Beta
public class NetUtil {

    private static Logger logger = LoggerFactory.getLogger(NetUtil.class);

    public static final int PORT_RANGE_MIN = 1024;

    public static final int PORT_RANGE_MAX = 65535;

    private static final Random random = new Random();

    private static InetAddress localAddress;
    private static String localHost;

    static {
        initLocalAddress();
    }

    public static InetAddress getLocalAddress() {
        return localAddress;
    }

    public static String getLocalHost() {
        return localHost;
    }

    /**
     * 测试端口是否空闲可用, from Spring SocketUtils
     */
    public static boolean isPortAvailable(int port) {
        try {
            ServerSocket serverSocket = ServerSocketFactory.getDefault().createServerSocket(port, 1,
                    InetAddress.getByName("localhost"));
            serverSocket.close();
            return true;
        } catch (Exception ex) {
            return false;
        }
    }

    /**
     * 从1024到65535， 随机找一个空闲端口 from Spring SocketUtils
     */
    public static int findRandomAvailablePort() {
        return findRandomAvailablePort(PORT_RANGE_MIN, PORT_RANGE_MAX);
    }

    /**
     * 在范围里随机找一个空闲端口,from Spring SocketUtils.
     *
     * @throws IllegalStateException 最多尝试(maxPort-minPort)次，如无空闲端口，抛出此异常.
     */
    public static int findRandomAvailablePort(int minPort, int maxPort) {
        int portRange = maxPort - minPort;
        int candidatePort;
        int searchCounter = 0;

        do {
            if (++searchCounter > portRange) {
                throw new IllegalStateException(
                        String.format("Could not find an available tcp port in the range [%d, %d] after %d attempts",
                                minPort, maxPort, searchCounter));
            }
            candidatePort = minPort + random.nextInt(portRange + 1);
        } while (!isPortAvailable(candidatePort));

        return candidatePort;
    }

    /**
     * 从某个端口开始，递增直到65535，找一个空闲端口.
     *
     * @throws IllegalStateException 范围内如无空闲端口，抛出此异常
     */
    public static int findAvailablePortFrom(int minPort) {
        for (int port = minPort; port < PORT_RANGE_MAX; port++) {
            if (isPortAvailable(port)) {
                return port;
            }
        }

        throw new IllegalStateException(
                String.format("Could not find an available tcp port in the range [%d, %d]", minPort, PORT_RANGE_MAX));
    }

    /**
     * 初始化本地地址
     */
    private static void initLocalAddress() {
        NetworkInterface nic = null;
        // 根据命令行执行hostname获得本机hostname， 与/etc/hosts 中该hostname的第一条ip配置，获得ip地址
        try {
            localAddress = InetAddress.getLocalHost();
            nic = NetworkInterface.getByInetAddress(localAddress);
        } catch (Exception ignored) {
            // NOSONAR
        }

        // 如果结果为空，或是一个loopback地址(127.0.0.1), 或是ipv6地址，再遍历网卡尝试获取
        if (localAddress == null || nic == null || localAddress.isLoopbackAddress()
                || localAddress instanceof Inet6Address) {
            InetAddress lookedUpAddr = findLocalAddressViaNetworkInterface();
            // 仍然不符合要求，只好使用127.0.0.1
            try {
                localAddress = lookedUpAddr != null ? lookedUpAddr : InetAddress.getByName("127.0.0.1");
            } catch (UnknownHostException ignored) {
                // NOSONAR
            }
        }

        localHost = IPUtil.toString(localAddress);

        logger.info("localhost is {}", localHost);
    }

    /**
     * 根据preferNamePrefix 与 defaultNicList的配置网卡，找出合适的网卡
     */
    private static InetAddress findLocalAddressViaNetworkInterface() {
        // 如果hostname +/etc/hosts 得到的是127.0.0.1, 则首选这块网卡
        String preferNamePrefix = SystemPropertiesUtil.getString("localhost.prefer.nic.prefix",
                "LOCALHOST_PREFER_NIC_PREFIX", "bond0.");
        // 如果hostname +/etc/hosts 得到的是127.0.0.1, 和首选网卡都不符合要求，则按顺序遍历下面的网卡
        String defaultNicList = SystemPropertiesUtil.getString("localhost.default.nic.list",
                "LOCALHOST_DEFAULT_NIC_LIST", "bond0,eth0,em0,br0");

        InetAddress resultAddress = null;
        Map<String, NetworkInterface> candidateInterfaces = MapUtil.newHashMap();

        // 遍历所有网卡，找出所有可用网卡，尝试找出符合prefer前缀的网卡
        try {
            for (Enumeration<NetworkInterface> allInterfaces = NetworkInterface.getNetworkInterfaces(); allInterfaces
                    .hasMoreElements(); ) {
                NetworkInterface nic = allInterfaces.nextElement();
                // 检查网卡可用并支持广播
                try {
                    if (!nic.isUp() || !nic.supportsMulticast()) {
                        continue;
                    }
                } catch (SocketException e) {
                    continue;
                }

                // 检查是否符合prefer前缀
                String name = nic.getName();
                if (name.startsWith(preferNamePrefix)) {
                    // 检查有否非ipv6 非127.0.0.1的inetaddress
                    resultAddress = findAvailableInetAddress(nic);
                    if (resultAddress != null) {
                        return resultAddress;
                    }
                } else {
                    // 不是Prefer前缀，先放入可选列表
                    candidateInterfaces.put(name, nic);
                }
            }

            for (String nifName : defaultNicList.split(",")) {
                NetworkInterface nic = candidateInterfaces.get(nifName);
                if (nic != null) {
                    resultAddress = findAvailableInetAddress(nic);
                    if (resultAddress != null) {
                        return resultAddress;
                    }
                }
            }
        } catch (SocketException e) {
            return null;
        }
        return null;

    }

    /**
     * 检查有否非ipv6，非127.0.0.1的inetaddress
     */
    private static InetAddress findAvailableInetAddress(NetworkInterface nic) {
        for (Enumeration<InetAddress> indetAddresses = nic.getInetAddresses(); indetAddresses.hasMoreElements(); ) {
            InetAddress inetAddress = indetAddresses.nextElement();
            if (!(inetAddress instanceof Inet6Address) && !inetAddress.isLoopbackAddress()) {
                return inetAddress;
            }
        }
        return null;
    }
}
